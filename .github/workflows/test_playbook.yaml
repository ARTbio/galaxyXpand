name: Test Playbook

on:
  push:
    branches-ignore:
      - readthedocs
      - master
env:
  # Global environment variables for the entire job
  BIOBLEND_GALAXY_URL: "http://127.0.0.1:80"
  BIOBLEND_TEST_JOB_TIMEOUT: "240"
  GALAXY_USER: tooladmin@galaxy.org
  # NOTE: The password is intentionally in plaintext for this demo version.
  GALAXY_USER_PASSWD: artbio2024

jobs:
  Ubuntu_20-04:
    name: GalaxyXpand on Ubuntu 20.04
    runs-on: self-hosted

    steps:
    # Step 1: Check out the repository's code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Set up a clean Python environment
    - name: Setup Python environment
      uses: actions/setup-python@v5
      with:
        python-version: '3.8' # Adjust to your Python version
        cache: 'pip' # Cache dependencies for faster runs

    # Step 3: Install Ansible and other Python packages
    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -r requirements.txt

    # Step 4: Install the required Ansible roles from requirements.yml
    - name: Install Ansible roles
      run: ansible-galaxy install -r requirements.yml -p roles/ -f

    # Step 5: Run the main playbook to install Galaxy
    - name: Run Ansible playbook to install Galaxy
      run: |
        sudo apt-get -qq update -y
        sudo apt-get -qq --purge remove nginx* || true
        ansible-playbook --extra-vars RUNNER_ALLOW_RUNASROOT="1" \
                         -e ansible_user="runner" \
                         -e allow_world_readable_tmpfiles="true" \
                         # --skip-tags galaxy_build_client \
                         playbook.yml

    # Step 6: Wait for the Galaxy instance to be fully available
    - name: Restart Galaxy and Nginx, then wait for API
      run: |
        echo "--- Restarting Galaxy application servers ---"
        # Using 'restart' is more robust than 'graceful' in a CI context after an install.
        sudo galaxyctl restart
        
        echo "--- Restarting Nginx web server ---"
        sudo systemctl restart nginx.service
        timeout 180s bash -c 'until curl --fail -s http://127.0.0.1/api/version > /dev/null; do echo -n "." && sleep 5; done'
        echo "Galaxy is up!"
        sudo galaxyctl status

    # Step 7: Run the playbook to install Galaxy tools
    - name: Run Ansible playbook to install Galaxy tools
      run: ansible-playbook --extra-vars RUNNER_ALLOW_RUNASROOT="1" -e ansible_user="runner" install_tools.yml

    # Step 8: Get the API key generated by the playbook for the tests
    - name: Set API key as environment variable
      run: |
        API_KEY=$(cat ./apikey.txt)
        echo "BIOBLEND_GALAXY_API_KEY=$API_KEY" >> $GITHUB_ENV

    # Step 9: Run the Bioblend integration tests
    - name: Run Bioblend tests
      run: |
        # We use --pyargs to target the specific test modules inside the bioblend package.
        # This is the cleanest way to run specific test files from an installed library.
        bioblend-galaxy-tests --color=yes -v --pyargs bioblend._tests.TestGalaxyHistories bioblend._tests.TestGalaxyTools --no-summary  || true

