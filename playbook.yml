---
- hosts: dbservers
  become: true
  become_user: root
  pre_tasks:
    - name: Install Dependencies
      package:
        name: 'acl'
  roles:
    - galaxyproject.postgresql
    - role: galaxyproject.postgresql_objects
      become: true
      become_user: postgres

- hosts: all
  become: true
  become_user: root

  pre_tasks:
    - name: Add custom slurm PPA (used for Slurm DRMAA package)
      apt_repository:
        repo: ppa:natefoo/slurm-drmaa
        state: present
        update_cache: yes
      when: install_slurm

    - name: Install Dependencies
      package:
        name:
          - 'acl'
          - 'bzip2'
          - 'git'
          - 'make'
          -  'tar'
          - 'python3-venv'
          - 'python3-setuptools'
          - slurm-wlm
          - slurm-drmaa-dev
    - name: merge common and specific galaxy_config dictionary
      set_fact:
        galaxy_config: "{{ common_galaxy_config|ansible.builtin.combine(galaxy_config, recursive=true) }}"

    - name: Ensure galaxy user exists for Conda ToS acceptance
      ansible.builtin.user:
        name: "{{ galaxy_user.name | default('galaxy') }}"
        state: present

  tasks:
    - name: Accept Anaconda Terms of Service for the galaxy user
      # Execute the commands to accept the Terms of Service
      ansible.builtin.command: "{{ galaxy_home }}/galaxy/database/dependencies/_conda/bin/conda tos accept --override-channels --channel {{ item }}"
      become: yes
      become_user: "{{ galaxy_user.name | default('galaxy') }}"
      loop:
        - https://repo.anaconda.com/pkgs/main
        - https://repo.anaconda.com/pkgs/r
      # We don't want this task to fail if Conda is not yet installed.
      # This can happen depending on the playbook structure.
      failed_when: false


  roles:
    - galaxyproject.galaxy
    - role: galaxyproject.miniconda
      become: true
      become_user: "{{ galaxy_user.name }}"
    - galaxyproject.nginx
    - role: galaxyproject.slurm
      become: true
      when: install_slurm
    - role: installUptime
      when: install_uptime

#  post_tasks:
#
#    - name: restart nginx
#      service:
#        name: nginx
#        state: restarted
#      when: not nginx_supervisor
